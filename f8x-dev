#!/usr/bin/env bash

# ===================== Basic variable settings =====================

if test -e /usr/local/bin/f8x
then
    sleep 0.001
    # f8x -update
else
    curl -o f8x https://f8x.io/ && mv --force f8x /usr/local/bin/f8x && chmod +x /usr/local/bin/f8x && echo -e "\033[1;36m$(date +"%H:%M:%S")\033[0m \033[1;32m[INFOR]\033[0m - \033[1;32mInstalled f8x tools\033[0m" || echo -e "\033[1;36m$(date +"%H:%M:%S")\033[0m \033[1;31m[ERROR]\033[0m - \033[1;31mf8x installation failed\n\033[0m"
fi

. /usr/local/bin/f8x > /dev/null 2>&1

F8x_dev_Version="0.0.6 Dev"

# ===================== Software version variable setting =====================

tomcat6_bin="apache-tomcat-6.0.53.tar.gz"
tomcat6_dir="apache-tomcat-6.0.53"
tomcat7_bin="apache-tomcat-7.0.109.tar.gz"
tomcat7_dir="apache-tomcat-7.0.109"
tomcat8_bin="apache-tomcat-8.5.68.tar.gz"
tomcat8_dir="apache-tomcat-8.5.68"
tomcat9_bin="apache-tomcat-9.0.50.tar.gz"
tomcat9_dir="apache-tomcat-9.0.50"

redis3_bin="redis-3.2.0.tar.gz"
redis3_dir="redis-3.2.0"
redis4_bin="redis-4.0.11.tar.gz"
redis4_dir="redis-4.0.11"
redis5_bin="redis-5.0.12.tar.gz"
redis5_dir="redis-5.0.12"

Main
Pentest_Base_Install > /dev/null 2>&1

# ===================== Install mysql =====================
mysql_docker_Install(){

    echo -e "\033[5;33m\nPlease enter your mysql listening port\033[0m" && read -r input
    mysql_port=$input
    echo -e "\033[5;33m\nPlease enter your mysql password(Special characters should be preceded by a backslash \"\\\" to escape them)\033[0m" && read -r input
    mysql_pass=$input

    docker pull mysql:latest
    docker images mysql
    docker run -d -p $mysql_port:3306 --name f8x-mysql1 -e MYSQL_ROOT_PASSWORD=$mysql_pass mysql:latest
    docker ps

    Echo_ALERT "Already listening to 0.0.0.0:$mysql_port, please do not deploy in public network environment"
    Echo_INFOR "Connect database with following setting:\nlisten: 0.0.0.0:$mysql_port\nusername: root\npassword: $mysql_pass"

}

# ===================== Install mariadb =====================
mariadb_Install(){

    name="mariadb"
    which mysql > /dev/null 2>&1

    if [ $? == 0 ]
    then
        Echo_ALERT "$name installed"
        systemctl start mariadb && Echo_INFOR "systemctl start mariadb"
    else
        Rm_Lock
        case $Linux_Version in
            *"CentOS"*|*"RedHat"*|*"Fedora"*)
                Install_Switch "mariadb"
                Install_Switch "mariadb-server"
                ;;
            *"Kali"*|*"Ubuntu"*|*"Debian"*)
                Install_Switch "mariadb-client"
                Install_Switch "mariadb-server"
                ;;
            *) ;;
        esac

        systemctl start mariadb
        mysql_secure_installation

        mysqlcmd="select User, host from mysql.user;
        GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'IDENTIFIED BY 'toor' WITH GRANT OPTION;
        FLUSH PRIVILEGES;"

        mysql -u root -p -e "${mysqlcmd}"
        Echo_INFOR "Default root/toor For security reasons, please do not deploy in a public network environment."

        systemctl restart mariadb

        # If you can't connect, you need to modify the configuration file
        # vim /etc/mysql/mariadb.conf.d/50-server.cnf
        # bind-address = 0.0.0.0
        # :wq
        # systemctl restart mariadb
    fi

}

# ===================== Install mariadb (docker) =====================
mariadb_docker_Install(){

    echo -e "\033[5;33m\nPlease enter your mariadb listening port\033[0m" && read -r input
    mariadb_port=$input
    echo -e "\033[5;33m\nPlease enter your mariadb password(Special characters should be preceded by a backslash \"\\\" to escape them)\033[0m" && read -r input
    mariadb_pass=$input

    docker pull mariadb
    docker images mariadb
    docker run -d -p $mariadb_port:3306 --name f8x-mariadb1 -e MYSQL_ROOT_PASSWORD=$mariadb_pass mariadb:latest
    docker ps

    Echo_ALERT "Already listening to 0.0.0.0:$mariadb_port, please do not deploy in public network environment"
    Echo_INFOR "Connect database with following setting:\nlisten: 0.0.0.0:$mariadb_port\nusername: root\npassword: $mariadb_pass"

}

# ===================== Install mongodb (docker) =====================
mongodb_docker_Install(){

    echo -e "\033[5;33m\nPlease enter your mongodb listening port\033[0m" && read -r input
    mongodb_port=$input

    docker pull mongo
    docker images mongo
    docker run -d -p $mongodb_port:27017 --name mongodb mongo
    docker ps

    Echo_ALERT "Already listening to 0.0.0.0:$mongodb_port, please do not deploy in public network environment"

}

# ===================== Install memcached =====================
memcached_Install(){

    Rm_Lock
    Install_Switch "memcached"

}

# ===================== Install redis3 =====================
redis3_Install(){

    Rm_Lock
    Install_Switch "tcl"

    case $Linux_Version in
        *"CentOS"*|*"RedHat"*|*"Fedora"*)
            Install_Switch "tcl-devel"
            ;;
        *"Kali"*|*"Ubuntu"*|*"Debian"*)
            Install_Switch "tcl-dev"
            ;;
        *) ;;
    esac

    name="redis3"

    cd /tmp && rm -rf $redis3_bin && $Porxy_OK wget http://download.redis.io/releases/$redis3_bin > /dev/null 2>&1 || Echo_ERROR2
    tar -zxf $redis3_bin > /dev/null 2>&1
    cd $redis3_dir
    make test
    make MALLOC=libc
    make install
    cd /tmp && rm -rf $redis3_bin

    mv --force /tmp/$redis3_dir/redis.conf /etc/redis.conf
    Echo_INFOR "redis.conf copied to /etc/redis.conf"
    rm -rf $redis3_dir

}

# ===================== Install redis4 =====================
redis4_Install(){

    Install_Switch "tcl"

    case $Linux_Version in
        *"CentOS"*|*"RedHat"*|*"Fedora"*)
            Install_Switch "tcl-devel"
            ;;
        *"Kali"*|*"Ubuntu"*|*"Debian"*)
            Install_Switch "tcl-dev"
            ;;
        *) ;;
    esac

    name="redis4"

    cd /tmp && rm -rf $redis4_bin && $Porxy_OK wget http://download.redis.io/releases/$redis4_bin > /dev/null 2>&1 || Echo_ERROR2
    tar -zxf $redis4_bin > /dev/null 2>&1
    cd $redis4_dir
    make test
    make MALLOC=libc
    make install
    cd /tmp && rm -rf $redis4_bin

    mv --force /tmp/$redis4_dir/redis.conf /etc/redis.conf
    Echo_INFOR "redis.conf copied to /etc/redis.conf"
    rm -rf $redis4_dir

}

# ===================== Install redis5 =====================
redis5_Install(){

    Rm_Lock
    Install_Switch "tcl"

    case $Linux_Version in
        *"CentOS"*|*"RedHat"*|*"Fedora"*)
            Install_Switch "tcl-devel"
            ;;
        *"Kali"*|*"Ubuntu"*|*"Debian"*)
            Install_Switch "tcl-dev"
            ;;
        *) ;;
    esac

    name="redis5"

    cd /tmp && rm -rf $redis5_bin && $Porxy_OK wget http://download.redis.io/releases/$redis5_bin > /dev/null 2>&1 || Echo_ERROR2
    tar -zxf $redis5_bin > /dev/null 2>&1
    cd $redis5_dir
    make test
    make MALLOC=libc
    make install
    cd /tmp && rm -rf $redis5_bin

    mv --force /tmp/$redis5_dir/redis.conf /etc/redis.conf
    Echo_INFOR "redis.conf copied to /etc/redis.conf"
    rm -rf $redis5_dir

}

# ===================== Install oracle11 (docker) =====================
oracle11_docker_Install(){

    echo -e "\033[5;33m\nPlease enter your oracle11 listening port\033[0m" && read -r input
    oracle11_port=$input
    echo -e "\033[5;33m\nPlease enter your oracle11 password(Special characters should be preceded by a backslash \"\\\" to escape them)\033[0m" && read -r input
    oracle11_pass=$input

    # https://hub.docker.com/r/gvenzl/oracle-xe
    docker pull gvenzl/oracle-xe:11
    docker run -d -p $oracle11_port:1521 --name f8x-oracle11 -e ORACLE_PASSWORD=$oracle11_pass gvenzl/oracle-xe:11
    docker ps

    Echo_ALERT "Already listening to 0.0.0.0:$oracle11_port, please do not deploy in public network environment"
    Echo_INFOR "Connect database with following setting:\nlisten: 0.0.0.0:$oracle11_port\nsid : XE\nusername: system\npassword: $oracle11_pass"

}

# ===================== Install tomcat6 =====================

tomcat6_Install(){

    # Tomcat 6.0 requires JRE 5.0 or later.

    name="tomcat6"
    dir="/usr/local/$tomcat6_dir"

    if test -d $dir
    then
        Echo_ALERT "$name is already installed in $dir"
    else
        cd $T_Dir && rm -rf $tomcat6_bin && $Porxy_OK wget https://archive.apache.org/dist/tomcat/tomcat-6/v6.0.53/bin/$tomcat6_bin > /dev/null 2>&1 || Echo_ERROR2
        tar -zxf $tomcat6_bin -C /usr/local/ > /dev/null 2>&1 && rm -rf $tomcat6_bin

    fi

    rm -rf /usr/local/tomcat
    ln -s /usr/local/${tomcat6_dir}/ /usr/local/tomcat
    Echo_INFOR "Manually run the following command:\nexport CATALINA_HOME=/usr/local/tomcat\nexport PATH=\$CATALINA_HOME/bin:\$PATH"
    Echo_INFOR "catalina.sh version"
    Echo_INFOR "catalina.sh start"

}

# ===================== Install tomcat7 =====================

tomcat7_Install(){

    # Tomcat 7.0 requires Java 6 or later.

    name="tomcat7"
    dir="/usr/local/$tomcat7_dir"

    if test -d $dir
    then
        Echo_ALERT "$name is already installed in $dir"
    else
        cd $T_Dir && rm -rf $tomcat7_bin && $Porxy_OK wget https://archive.apache.org/dist/tomcat/tomcat-7/v7.0.109/bin/$tomcat7_bin > /dev/null 2>&1 || Echo_ERROR2
        tar -zxf $tomcat7_bin -C /usr/local/ > /dev/null 2>&1 && rm -rf $tomcat7_bin
    fi

    rm -rf /usr/local/tomcat
    ln -s /usr/local/${tomcat7_dir}/ /usr/local/tomcat
    Echo_INFOR "Manually run the following command:\nexport CATALINA_HOME=/usr/local/tomcat\nexport PATH=\$CATALINA_HOME/bin:\$PATH"
    Echo_INFOR "catalina.sh version"
    Echo_INFOR "catalina.sh start"

}

# ===================== Install tomcat8 =====================

tomcat8_Install(){

    # Tomcat 8.5 requires Java 7 or later.

    name="tomcat8"
    dir="/usr/local/$tomcat8_dir"

    if test -d $dir
    then
        Echo_ALERT "$name is already installed in $dir"
    else
        cd $T_Dir && rm -rf $tomcat8_bin && $Porxy_OK wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.68/bin/$tomcat8_bin > /dev/null 2>&1 || Echo_ERROR2
        tar -zxf $tomcat8_bin -C /usr/local/ > /dev/null 2>&1 && rm -rf $tomcat8_bin

    fi

    rm -rf /usr/local/tomcat
    ln -s /usr/local/${tomcat8_dir}/ /usr/local/tomcat
    Echo_INFOR "Manually run the following command:\nexport CATALINA_HOME=/usr/local/tomcat\nexport PATH=\$CATALINA_HOME/bin:\$PATH"
    Echo_INFOR "catalina.sh version"
    Echo_INFOR "catalina.sh start"

}

# ===================== Install tomcat9 =====================

tomcat9_Install(){

    # Tomcat 9.0 requires Java 8 or later.

    name="tomcat9"
    dir="/usr/local/$tomcat9_dir"

    if test -d $dir
    then
        Echo_ALERT "$name is already installed in $dir"
    else
        cd $T_Dir && rm -rf $tomcat9_bin && $Porxy_OK wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.50/bin/$tomcat9_bin > /dev/null 2>&1 || Echo_ERROR2
        tar -zxf $tomcat9_bin -C /usr/local/ > /dev/null 2>&1 && rm -rf $tomcat9_bin

    fi

    rm -rf /usr/local/tomcat
    ln -s /usr/local/${tomcat9_dir}/ /usr/local/tomcat
    Echo_INFOR "Manually run the following command:\nexport CATALINA_HOME=/usr/local/tomcat\nexport PATH=\$CATALINA_HOME/bin:\$PATH"
    Echo_INFOR "catalina.sh version"
    Echo_INFOR "catalina.sh start"

}

# ===================== Install nginx (pkg) =====================
nginx_Install_pkg(){

    name="nginx"

    Rm_Lock
    Install_Switch "nginx"

    Echo_INFOR "systemctl status nginx"
    systemctl status nginx

}

# ===================== Install apache (pkg) =====================
apache_Install_pkg(){

    name="apache2"

    Rm_Lock
    case $Linux_Version in
        *"CentOS"*|*"RedHat"*|*"Fedora"*|*"AlmaLinux"*|*"VzLinux"*|*"Rocky"*)
            Install_Switch "httpd"
            Echo_INFOR "systemctl status httpd"
            systemctl status httpd
            ;;
        *"Kali"*|*"Ubuntu"*|*"Debian"*)
            Install_Switch "apache2"
            Echo_INFOR "systemctl status apache2"
            systemctl status apache2
            ;;
        *)
            ;;
    esac

}

php_base_Install(){

    Rm_Lock
    case $Linux_Version in
        *"CentOS"*|*"RedHat"*|*"Fedora"*|*"AlmaLinux"*|*"VzLinux"*|*"Rocky"*)
            Echo_INFOR "RedHat 系暂未适配"
            ;;
        *"Debian"*|*"Kali"*)
            Install_Switch "software-properties-common"
            Install_Switch "gnupg"

            curl -fsSL https://packages.sury.org/php/apt.gpg | sudo apt-key add -
            sudo add-apt-repository "deb https://packages.sury.org/php/ $(lsb_release -cs) main"
            apt-get update > /dev/null 2>&1
            ;;
        *"Ubuntu"*)
            Install_Switch "software-properties-common"
            Install_Switch "gnupg"

            sudo add-apt-repository ppa:ondrej/php
            apt-get update > /dev/null 2>&1
            ;;
        *) ;;
    esac

}

# ===================== Install php5.6 (pkg) =====================
php56_Install(){

    name="php5.6"

    php_base_Install
    case $Linux_Version in
        *"Kali"*|*"Ubuntu"*|*"Debian"*)
            Install_Switch "php5.6"
            Install_Switch "php5.6-fpm"
            Install_Switch "php5.6-mysql"
            Install_Switch "php5.6-curl"
            Install_Switch "php5.6-json"
            Install_Switch "php5.6-mbstring"
            Install_Switch "php5.6-gd"
            Install_Switch "php5.6-xml"
            Install_Switch "php5.6-intl"
            Install_Switch "php5.6-odbc"
            Install_Switch "php5.6-cgi"
            Install_Switch "php5.6-zip"

            update-alternatives --config php
            php -v
            Echo_INFOR "Run the following command to switch php version:\nupdate-alternatives --config php"
            ;;
        *) ;;
    esac

}

# ===================== Install php7.2 (pkg) =====================
php72_Install(){

    name="php7.2"

    php_base_Install
    case $Linux_Version in
        *"Kali"*|*"Ubuntu"*|*"Debian"*)
            Install_Switch "php7.2"
            Install_Switch "php7.2-fpm"
            Install_Switch "php7.2-mysql"
            Install_Switch "php7.2-curl"
            Install_Switch "php7.2-json"
            Install_Switch "php7.2-mbstring"
            Install_Switch "php7.2-gd"
            Install_Switch "php7.2-xml"
            Install_Switch "php7.2-intl"
            Install_Switch "php7.2-odbc"
            Install_Switch "php7.2-cgi"
            Install_Switch "php7.2-zip"

            update-alternatives --config php
            php -v
            Echo_INFOR "Run the following command to switch php version:\nupdate-alternatives --config php"
            ;;
        *) ;;
    esac

}

# ===================== Install php7.2 (pkg) + nginx (pkg) + autoconfig =====================
php72_nginx_Install(){

    service httpd stop > /dev/null 2>&1
    apt remove -y apache2 > /dev/null 2>&1

    nginx_Install_pkg
    php72_Install

    mkdir -p /var/www/f0x && cd $_
    echo "<?php phpinfo() ?>" > /var/www/f0x/phpinfo.php

    # nginx 配置
    cd /etc/nginx/sites-available
    rm -rf default

tee default <<-'EOF'
server {
        listen 7777 default_server;

        location / {
                root /var/www/f0x;
                index index.php;

                try_files $uri $uri/ =404;
        }

        location ~ \.php$ {
                root /var/www/f0x;

                fastcgi_pass unix:/run/php/php7.2-fpm.sock;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                include fastcgi_params;
        }
}
EOF

    /usr/sbin/php-fpm7.2 1> /dev/null 2>> /tmp/f8x_error.log
    /usr/sbin/nginx -t 1> /dev/null 2>> /tmp/f8x_error.log

    service nginx restart
    ufw disable 1> /dev/null 2>> /tmp/f8x_error.log
    service firewalld stop 1> /dev/null 2>> /tmp/f8x_error.log
    systemctl start nginx.service
    ss -tnlp

    chmod -R 777 /var/www/f0x/

    Echo_INFOR "config : /etc/nginx/sites-available/default"
    Echo_INFOR "www    : /var/www/f0x"
    Echo_INFOR "test   : curl http://127.0.0.1:7777/phpinfo.php"

}

# -help
Help_Info(){

    echo -e "\033[1;34mapache \033[0m"
    echo -e "  \033[1;34m-apache-pkg\033[0m \033[0;34m      : install apache    (Package Manager) \033[0m"
    echo -e ""
    echo -e "\033[1;34mnginx \033[0m"
    echo -e "  \033[1;34m-nginx-pkg\033[0m \033[0;34m       : install nginx     (Package Manager) \033[0m"
    echo -e "  \033[1;34m-nginx-src\033[0m \033[0;34m       : install nginx     (Compile) \033[0m"
    echo -e ""
    echo -e "\033[1;34mtomcat \033[0m"
    echo -e "  \033[1;34m-tomcat6\033[0m \033[0;34m         : install tomcat6   (Compile)\033[0m"
    echo -e "  \033[1;34m-tomcat7\033[0m \033[0;34m         : install tomcat7   (Compile)\033[0m"
    echo -e "  \033[1;34m-tomcat8\033[0m \033[0;34m         : install tomcat8   (Compile)\033[0m"
    echo -e "  \033[1;34m-tomcat9\033[0m \033[0;34m         : install tomcat9   (Compile)\033[0m"
    echo -e ""
    echo -e "\033[1;34mDatabase \033[0m"
    echo -e "  \033[1;34m-mysql\033[0m \033[0;34m           : install mysql     (Docker) \033[0m"
    echo -e "  \033[1;34m-mariadb\033[0m \033[0;34m         : install mariadb   (Docker) \033[0m"
    echo -e "  \033[1;34m-memcached\033[0m \033[0;34m       : install memcached (Package Manager) \033[0m"
    echo -e "  \033[1;34m-mongodb\033[0m \033[0;34m         : install mongodb   (Docker) \033[0m"
    echo -e "  \033[1;34m-redis3\033[0m \033[0;34m          : install redis3    (Compile) \033[0m"
    echo -e "  \033[1;34m-redis4\033[0m \033[0;34m          : install redis4    (Compile) \033[0m"
    echo -e "  \033[1;34m-redis5\033[0m \033[0;34m          : install redis5    (Compile) \033[0m"
    echo -e "  \033[1;34m-oracle11\033[0m \033[0;34m        : install oracle11  (Docker) \033[0m"
    echo -e ""
    echo -e "\033[1;34mphp \033[0m"
    echo -e "  \033[1;34m-php56\033[0m \033[0;34m           : install php5.6    (Package Manager)\033[0m"
    echo -e "  \033[1;34m-php72\033[0m \033[0;34m           : install php7.2    (Package Manager)\033[0m"
    echo -e "  \033[1;34m-php72-nginx\033[0m \033[0;34m     : install php7.2 + nginx (Package Manager) \033[0m"
    echo -e ""
    echo -e "\033[1;37mcreate by ffffffff0x\033[0m"
    echo -e ""

}

for cmd in $@
do
    case $cmd in
        -mysql)
            Base_Check
            Docker_Check
            mysql_docker_Install
            ;;
        -mariadb)
            Base_Check
            Docker_Check
            mariadb_docker_Install
            ;;
        -mongodb)
            Base_Check
            Docker_Check
            mongodb_docker_Install
            ;;
        -memcached)
            Base_Check
            memcached_Install
            ;;
        -redis3)
            Porxy_Switch
            Base_Check
            redis3_Install
            ;;
        -redis4)
            Porxy_Switch
            Base_Check
            redis4_Install
            ;;
        -redis5)
            Porxy_Switch
            Base_Check
            redis5_Install
            ;;
        -oracle11)
            Base_Check
            Docker_Check
            oracle11_docker_Install
            ;;
        -tomcat6)
            Porxy_Switch
            Base_Check
            tomcat6_Install
            ;;
        -tomcat7)
            Porxy_Switch
            Base_Check
            tomcat7_Install
            ;;
        -tomcat8)
            Porxy_Switch
            Base_Check
            tomcat8_Install
            ;;
        -tomcat9)
            Porxy_Switch
            Base_Check
            tomcat9_Install
            ;;
        -nginx-src)
            Porxy_Switch
            Base_Check
            nginx_Install
            ;;
        -nginx-pkg)
            nginx_Install_pkg
            ;;
        -apache-pkg)
            apache_Install_pkg
            ;;
        -php56)
            Base_Check
            php56_Install
            ;;
        -php72)
            Base_Check
            php72_Install
            ;;
        -php72-nginx)
            Base_Check
            php72_nginx_Install
            ;;
        -help | help)
            printf "\033c"
            Help_Info
            exit 1
            ;;
    esac
done

echo -e "\033[1;36m \n-----OVER-----\n \033[0m"
